<?php

/**
 * BaseCategoryPhoto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property text $description
 * @property bigint $team_id
 * @property text $meta_title
 * @property text $meta_keywords
 * @property text $meta_description
 * @property Team $Team
 * @property Doctrine_Collection $Photos
 * 
 * @method string              getName()             Returns the current record's "name" value
 * @method text                getDescription()      Returns the current record's "description" value
 * @method bigint              getTeamId()           Returns the current record's "team_id" value
 * @method text                getMetaTitle()        Returns the current record's "meta_title" value
 * @method text                getMetaKeywords()     Returns the current record's "meta_keywords" value
 * @method text                getMetaDescription()  Returns the current record's "meta_description" value
 * @method Team                getTeam()             Returns the current record's "Team" value
 * @method Doctrine_Collection getPhotos()           Returns the current record's "Photos" collection
 * @method CategoryPhoto       setName()             Sets the current record's "name" value
 * @method CategoryPhoto       setDescription()      Sets the current record's "description" value
 * @method CategoryPhoto       setTeamId()           Sets the current record's "team_id" value
 * @method CategoryPhoto       setMetaTitle()        Sets the current record's "meta_title" value
 * @method CategoryPhoto       setMetaKeywords()     Sets the current record's "meta_keywords" value
 * @method CategoryPhoto       setMetaDescription()  Sets the current record's "meta_description" value
 * @method CategoryPhoto       setTeam()             Sets the current record's "Team" value
 * @method CategoryPhoto       setPhotos()           Sets the current record's "Photos" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCategoryPhoto extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('category_photo');
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('description', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('team_id', 'bigint', null, array(
             'type' => 'bigint',
             ));
        $this->hasColumn('meta_title', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('meta_keywords', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('meta_description', 'text', null, array(
             'type' => 'text',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Team', array(
             'local' => 'team_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Photo as Photos', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'name',
              1 => 'description',
              2 => 'meta_title',
              3 => 'meta_keywords',
              4 => 'meta_description',
             ),
             ));
        $sluggable1 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'unique' => true,
             'type' => 'string',
             'builder' => 
             array(
              0 => 'Slug',
              1 => 'slugify',
             ),
             'indexName' => 'slugCategoryPhoto',
             'uniqueBy' => 
             array(
              0 => 'lang',
             ),
             ));
        $i18n0->addChild($sluggable1);
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
    }
}